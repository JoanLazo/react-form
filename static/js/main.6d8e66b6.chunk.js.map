{"version":3,"sources":["logo.svg","components/TodoForm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","description","priority","handleInputChange","bind","assertThisInitialized","handleSubmit","e","preventDefault","props","onAddTodo","setState","_e$target","target","value","name","console","log","defineProperty","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","Component","App","todos","handleAddTodo","index","window","confirm","filter","i","todo","concat","toConsumableArray","_this2","map","key","onClick","removeTodo","href","length","src","logo","alt","components_TodoForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d8e66b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      title: '',\r\n      responsible: '',\r\n      description: '',\r\n      priority: 'low'\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);\r\n    this.setState({\r\n      title: '',\r\n      responsible: '',\r\n      description: '',\r\n      priority: 'low'\r\n    });\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    const {value, name} = e.target;\r\n    console.log(value, name);\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              className=\"form-control\"\r\n              value={this.state.title}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Title\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"responsible\"\r\n              className=\"form-control\"\r\n              value={this.state.responsible}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Responsible\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"description\"\r\n              className=\"form-control\"\r\n              value={this.state.description}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Description\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <select\r\n                name=\"priority\"\r\n                className=\"form-control\"\r\n                value={this.state.priority}\r\n                onChange={this.handleInputChange}\r\n              >\r\n              <option>low</option>\r\n              <option>medium</option>\r\n              <option>high</option>\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Save\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default TodoForm;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// data\nimport { todos } from './todos.json';\n\n// subcomponents\nimport TodoForm from './components/TodoForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos\n    }\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  removeTodo(index) {\n    if(window.confirm('Â¿Estas seguro de eliminar esta nota?')){\n      this.setState({\n        todos: this.state.todos.filter((e, i) => {\n          return i !== index\n        })\n      });\n    }\n   \n  }\n\n  handleAddTodo(todo) {\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo, i) => {\n      return (\n        <div className=\"col-md-4\" key={i}>\n          <div className=\"card mt-4\">\n            <div className=\"card-title text-center\">\n              <h3>{todo.title}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                {todo.priority}\n              </span>\n            </div>\n            <div className=\"card-body\">\n              {todo.description}\n            </div>\n            <div className=\"card-footer\">\n              <button\n                className=\"btn btn-danger\"\n                onClick={this.removeTodo.bind(this, i)}>\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )\n    });\n\n    // RETURN THE COMPONENT\n    return (\n      <div className=\"App\">\n\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <a className=\"navbar-brand\" href=\"/\">\n            Tasks\n            <span className=\"badge badge-pill badge-light ml-2\">\n              {this.state.todos.length}\n            </span>\n          </a>\n        </nav>\n\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n\n            <div className=\"col-md-4 text-center\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <TodoForm onAddTodo={this.handleAddTodo}></TodoForm>\n            </div>\n\n            <div className=\"col-md-8\">\n              <div className=\"row\">\n                {todos}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}